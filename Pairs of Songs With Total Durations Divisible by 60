You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.
 

Constraints:

1 <= time.length <= 6 * 104
1 <= time[i] <= 500

//cpp my solution

static const auto io_sync_off = []()
{
    std::ios::sync_with_stdio(false);
    cin.tie(NULL); return 0;
}();

class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        int sz = time.size();
        int ans=0;
        
        unordered_map<int,vector<int>> mp;
        
        for(int i=0;i<60;i++)
            mp[i] = vector<int>();
        
        for(int i=0;i<sz;i++)
            mp.at(time[i]%60).push_back(i);
        
        for(int i=0;i<=30;i++){
            int rem = (60-i)%60;
            int l1 = mp.at(i).size();
            int l2 = mp.at(rem).size();
                
            if(l1 && l2){
                if(i==rem)  ans+=(l1*(l1-1))/2;
                else    ans+=(l1*l2);
            }
        }
        
        return ans;
    }
};


//using array instead of map

static const auto io_sync_off = []()
{
    std::ios::sync_with_stdio(false);
    cin.tie(NULL); return 0;
}();

class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        int sz = time.size();
        int ans=0;
        
        vector<vector<int>> mp(60,vector<int>());
        
        for(int i=0;i<sz;i++)
            mp[time[i]%60].push_back(i);
        
        for(int i=0;i<=30;i++){
            int rem = (60-i)%60;
            int l1 = mp[i].size();
            int l2 = mp[rem].size();
                
            if(l1 && l2){
                if(i==rem)  ans+=(l1*(l1-1))/2;
                else    ans+=(l1*l2);
            }
        }
        
        return ans;
    }
};
