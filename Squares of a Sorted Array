Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

//cpp my solution O(n+logn)
//very fast solution

class Solution {
public:
    int bins(vector<int>& nums){
        int sz = nums.size();
        int l=0,r=sz-1,mid,orr;
        
        while(l<=r){
            mid = (l+r)/2;
            
            if(nums[mid]==0)
                return mid;
            
            if(nums[mid]<0){
                 if(mid+1==sz-1 || nums[mid+1]>=0)
                     return mid+1;
                l = mid+1;
            }else if(nums[mid]>0){
                 if(mid-1<=0 || nums[mid-1]<=0)
                     return mid;
                orr=mid;
                r = mid-1;
            }
        }
        
        return orr;
    }
    vector<int> sortedSquares(vector<int>& nums) {
        int sz = nums.size();
        vector<int> ans;
        if(sz==1)   return {nums[0]*nums[0]};
        
        int ind = bins(nums);
        int l=ind-1,r=ind;
        
        while(l>=0 || r<sz){
            if(r>=sz || l>=0 && abs(nums[l])<=abs(nums[r])){
                ans.push_back(nums[l]*nums[l]);
                --l;
            }else if(l<0 || r<sz && abs(nums[l])>abs(nums[r])){
                ans.push_back(nums[r]*nums[r]);
                ++r;
            }
        }
        
        return ans;
    }
};
