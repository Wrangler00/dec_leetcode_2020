Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?

//cpp my solution 4ms

static const auto io_sync_off = []()
{
    std::ios::sync_with_stdio(false);
    cin.tie(NULL); return 0;
}();

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int a=INT_MIN,b=INT_MIN,c=INT_MIN;
        
        for(int i=nums.size()-1;i>=0;i--){
            if(c==INT_MIN || c<nums[i]) c=nums[i];
            else if((b==INT_MIN || b<nums[i]) && nums[i]<c) b=nums[i];
            else if((a==INT_MIN || a<nums[i]) && nums[i]<b) return true;
        }
        
        return false;
    }
};
