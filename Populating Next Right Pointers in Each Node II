Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Follow up:

You may only use constant extra space.
Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.
 

Example 1:



Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
 

Constraints:

The number of nodes in the given tree is less than 6000.
-100 <= node.val <= 100

//cpp my solution BFS
//using recursive queue qpproach

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void bfs(vector<Node*> que){
        vector<Node*> q;
        int sz = que.size();
        
        if(sz==0)   return;
            
        for(int i=0;i<sz;i++){
            if(i==sz-1) que[i]->next = NULL;
            else    que[i]->next = que[i+1];
            
            if(que[i]->left)    q.push_back(que[i]->left);
            if(que[i]->right)   q.push_back(que[i]->right);
        }
        
        bfs(q);
    }
    Node* connect(Node* root) {
        if(root)    bfs(vector<Node*>(1,root));
        return root;
    }
};



//genuine O(1) solution using three pointers
//JAVA solution

public class Solution {

    public void connect(TreeLinkNode root) {
        TreeLinkNode head=root;//The left most node in the lower level
        TreeLinkNode prev=null;//The previous node in the lower level
        TreeLinkNode curr=null;//The current node in the upper level
        while (head!=null){
            curr=head;
            prev=null;
            head=null;
            while (curr!=null){
                if (curr.left!=null){
                    if (prev!=null)
                        prev.next=curr.left;
                    else 
                        head=curr.left;
                    prev=curr.left;
                }
                if (curr.right!=null){
                    if (prev!=null)
                        prev.next=curr.right;
                    else 
                        head=curr.right;
                    prev=curr.right;
                }
                curr=curr.next;
            }
        }
    }
}

//above solution with comments:

public class Solution {
    public void connect(TreeLinkNode root) {
        // Logic: 
        //        node moves to all nodes in tree in level order fashion
        //        needle keeps sewing together next level's children

        // levelHead is sentinel, keeps track of start node of next level
        TreeLinkNode node = root, levelHead = new TreeLinkNode(0);
        
        while(node != null){ // this loop is for different levels
        
            // needle is sewing next fields in current level
            // first time in a level, it is same as leavelHead (with null next)
            // but as soon as we get a non null child from node
            // needle threads that child into its next, 
            //      --------->>  thus making that child as next levelHead
            //
            TreeLinkNode needle = levelHead;
        
            // this loop moves node in current level
            while(node != null){
                
                if(node.left != null){
                    needle.next = node.left;
                    needle = needle.next;
                }
                if(node.right != null){
                    needle.next = node.right;
                    needle = needle.next;
                }
                
                node = node.next; // move node to next in same level, end up null at rightmost
            }
            // current level ended in node being null
            // take node fom sentinel's next, which is next levels start
            node = levelHead.next;
            
            // levelhead.next grabbed into node above, it has been used
            // so make it null so next time we dont grab again, 
            //    if all next lvl is null, it remains null prompting end of run
            levelHead.next = null;  
        }
    }
}
